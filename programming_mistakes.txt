stupid mistakes:
- not size(), not sizeof(), not len(), but length()
- not append(List, A, New) but append(List, [A], New)
- =< and >= (not >= or =<)
- if complex, use helper predicates to break problem down
  sounds obvious, but all your practice has been on predicates
  which don't require helper ones, so you're not used to it!


key predefined predicates:
:- use_module(library(lists)). REQUIRED! (for some)
- is_list(L)
- sort(A, SortedA)             REMEMBER!
- reverse(A, reversedA)        REMEMBER!
- append(L1, L2, L1andL2)
- member(X, L)
- length(L, X)
- findall(X, G, L)
- setof(X, G, L) orders AND removes duplicates
- use '!;' for 'if above fails, do this'


emacs tricks:
C-<number> <character>
types <character> <number> times
//
C-_
undoes with more freedom than C-x u
//
C-g C-_
redo with same freedom


singleton variables:
- to state facts about fixed variables, don't use variable notation,
use inverted commas. eg 
andgate('And'). rather than andgate(And).


recursion:
- treat the head, recursively call the tail, append the two
- always make recursive call asap


mysort():
- you can write your own in 1 predicate using setof()


setof(X, G, L):
- setof additionally orders the list in ascending order and
  removes duplicates
- to make setof accumulate into 1 list like findall, use ^
- CRUCIAL stuff to remember about ^
  see ListsSetofEx/parents.pl


findall(X, G, L) vs setof:
- findall takes all bindings, for all unbound variables in G, for all
solutions to G	
- setof takes all bindings, for unbound variables in G AND NOT IN X,
for all solutions to G
- use maximum ^ to get setof to accumulate like findall
- see ListsSetofEx/parents.pl


failures:
- P7, flatten a nested list structure
- P9 succeeded but took you ages
- from 2ndyear:
       in_range(Min, Max, N)
       all_female_cell()
